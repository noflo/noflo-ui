INPORT=Dispatch.IN:IN
OUTPORT=Dispatch.PASS:PASS
OUTPORT=NewActions.OUT:NEW

'github:download,github:gist,github:sync:prepare,github:sync:synchronize' -> ROUTES Dispatch(ui/DispatchAction)

# New actions generated by this middleware
'application:hash' -> ACTION ApplicationRedirectAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'storage:save:graph' -> ACTION SaveGraphAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'storage:save:component' -> ACTION SaveComponentAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'storage:save:spec' -> ACTION SaveSpecAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'storage:save:project' -> ACTION SaveProjectAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'github:error' -> ACTION ErrorAction(ui/SetAction) OUT -> IN NewActions(core/Merge)

# Downloading a GitHub project
Dispatch HANDLE[0] -> IN CheckRepo(ui/CheckRepoExists)
# If it already exists, redirect
CheckRepo EXISTING -> IN ApplicationRedirectAction
# If not, download as new project
CheckRepo NEW -> IN GetRepo(ui/RepoToProject)
GetRepo PROJECT -> IN SaveProjectAction
GetRepo TOKEN -> TOKEN Synchronize(ui/GithubSynchronization)
GetRepo PULL -> PULL Synchronize(ui/GithubSynchronization)
GetRepo ERROR -> IN ErrorAction

# Downloading a gist example
# First check if we already have a local version of the gist
Dispatch HANDLE[1] -> IN CheckGist(ui/CheckGistExists)
# If it already exists, redirect
CheckGist EXISTING -> IN ApplicationRedirectAction
# If not, download as new project
CheckGist NEW -> IN GetGist(ui/GistToProject)
GetGist GRAPH -> IN SaveGraphAction
GetGist COMPONENT -> IN SaveComponentAction
GetGist PROJECT -> IN SaveProjectAction
GetGist ERROR -> IN ErrorAction

# GitHub synchronization handling
Synchronize GRAPH -> IN SaveGraphAction
Synchronize COMPONENT -> IN SaveComponentAction
Synchronize SPEC -> IN SaveSpecAction
Synchronize ERROR -> IN ErrorAction
