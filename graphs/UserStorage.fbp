INPORT=Dispatch.IN:IN
INPORT=LoadUser.START:START
OUTPORT=Merge.OUT:USER

'loginFree,loginPro,logout,refreshToken' -> ROUTES Dispatch(routers/GroupRouter)

# Initial persistent user data
LoadUser(ui/LoadUserData) USER -> IN Merge(core/Merge)
# In case of errors reset
LoadUser ERROR -> CLEAR Reset(ui/ClearUserData)

# Login handling
'$NOFLO_OAUTH_PROVIDER' -> SITE Login(ui/RemoteLogin)
'$NOFLO_OAUTH_SERVICE_USER' -> SITE GetRemoteUser(ui/GetRemoteUser)
'$NOFLO_OAUTH_GATE' -> GATEKEEPER Login
'$NOFLO_OAUTH_CLIENT_ID' -> CLIENTID Login
'github_public' -> PROVIDER Login
'github' -> SCOPE Login
Dispatch OUT[0] -> LOGIN Login
Login TOKEN -> TOKEN GetRemoteUser
GetRemoteUser USER -> USER StoreUser(ui/StoreUser)
StoreUser USER -> IN Merge

Login ERROR -> IN Show(core/Output)
GetRemoteUser ERROR -> IN Show(core/Output)

# On browser we need to check login state immediately
'' -> CHECK Login

# Re-login handling for Pro
'$NOFLO_OAUTH_PROVIDER' -> SITE ProLogin(ui/RemoteLogin)
'$NOFLO_OAUTH_SERVICE_USER' -> SITE ProGetRemoteUser(ui/GetRemoteUser)
'$NOFLO_OAUTH_GATE' -> GATEKEEPER ProLogin
'$NOFLO_OAUTH_CLIENT_ID' -> CLIENTID ProLogin
'github_private' -> PROVIDER ProLogin
'github' -> SCOPE ProLogin
Dispatch OUT[1] -> LOGIN ProLogin
ProLogin TOKEN -> TOKEN ProGetRemoteUser
ProGetRemoteUser USER -> USER StoreUser
ProLogin ERROR -> IN Show(core/Output)
ProGetRemoteUser ERROR -> IN Show(core/Output)

# Logout handling
Dispatch OUT[2] -> CLEAR Reset
Reset USER -> IN Merge

# OAuth2 token refresh handling
'$NOFLO_OAUTH_PROVIDER' -> SITE RefreshToken(ui/AuthorizationRefreshToken)
'$NOFLO_OAUTH_SERVICE_USER' -> SITE GetRemoteUser(ui/GetRemoteUser)
'$NOFLO_OAUTH_CLIENT_ID' -> CLIENTID RefreshToken
Dispatch OUT[3] -> REFRESHTOKEN RefreshToken
RefreshToken TOKEN -> TOKEN GetRemoteUser
GetRemoteUser USER -> USER StoreUser(ui/StoreUser)
StoreUser USER -> IN Merge

Login ERROR -> IN Show(core/Output)
GetRemoteUser ERROR -> IN Show(core/Output)
